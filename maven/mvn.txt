
https://mvnrepository.com/

sudo /usr/sbin/alternatives --config java


sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo

sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo

sudo yum install -y apache-maven

mvn exec:java -Dexec.mainClass="am.liuyong.Main"



----------------
1. ignore test
----------------

mvn package -Dmaven.test.skip=true
mvn test -Dmaven.test.skip=false -Dtest=com.xxx.Class#method1

pom.xml
<properties>
    <maven.test.skip>true</maven.test.skip>
</properties>

mvn package -DskipTests

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>2.19.1</version>
    <configuration>
        <skipTests>true</skipTests>
    </configuration>
</plugin>

----------------
2. sourceEncoding
----------------
 <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <kotlin.version>1.2.60</kotlin.version>
      <junit.version>4.12</junit.version>
  </properties>

----------------
3. exclusion dependency
----------------
<dependency>
    <groupId>apg.apache.struts</groupId>
    <artifactId>struts2-core</artifactId>
    <version>${kotlin.version}</version>
    <exclusions>
        <exclusion>
             <groupId>javassist</groupId>
             <artifactId>javassist</artifactId>
        <exclusion>
    </exclusions>
</dependency>


4. Scope

Six Dependency scopes in single line:

compile: default
provided: by JDK or a container at runtime, e.g. jsp-api
runtime: not required for compilation,  e.g. JDBC driver
test: used only during tests, e.g Junit
system: provided locally
import: only available in Maven 2.0.9 or later


   scope compile  -> 传递
   scope test     -> 不传递

   <dependency>
       <groupId>com.sybase.jdbc4</groupId>
       <artifactId>jdbc4</artifactId>
       <version>7.0.7</version>
       <scope>system</scope>
       <systemPath>${project.basedir}/lib/jconnect-7.0.7.jar</systemPath>
   </dependency>


5. 原则
   1. 路径最短原则
   2. 路径相同，先出现原则

6. 版本锁定
<dependencyManagement>
   <dependencies>
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.0</version>
       </dependency>
   </dependencies>
</dependencyManagement>



7. Run java

maven-exec-plugin:

mvn exec:java -Dexec.mainClass="com.example.Main" -Dexec.args="arg0 arg1"
mvn exec:java -D"exec.mainClass"="com.example.Main"  # windows

If you're doing this regularly, you can add the parameters into the pom.xml as well:

<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>exec-maven-plugin</artifactId>
  <version>1.2.1</version>
  <executions>
    <execution>
      <goals>
        <goal>java</goal>
      </goals>
    </execution>
  </executions>
  <configuration>
    <mainClass>com.example.Main</mainClass>
    <arguments>
      <argument>foo</argument>
      <argument>bar</argument>
    </arguments>
  </configuration>
</plugin>


8. package jar with main class

  <plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-jar-plugin</artifactId>
       <configuration>
           <archive>
               <manifest>
                   <addClasspath>true</addClasspath>
                   <classpathPrefix>${project.build.finalName}.lib/</classpathPrefix>
                   <mainClass>${fully.qualified.main.class}</mainClass>
               </manifest>
           </archive>
       </configuration>
   </plugin>


9. package in a single jar

   <plugin>
       <!-- mvn clean compile assembly:single -->
       <artifactId>maven-assembly-plugin</artifactId>
       <configuration>
           <archive>
               <manifest>
                   <mainClass>${fully.qualified.main.class}</mainClass>
               </manifest>
           </archive>
           <descriptorRefs>
               <descriptorRef>jar-with-dependencies</descriptorRef>
           </descriptorRefs>
       </configuration>
   </plugin>


10. Generate all dependencies in a separate directory before the package phase and then include that in the classpath of the manifest
<!-- you must include the lib folder in the same directory with your jar where ever you transport the jar to. ->

<plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-dependency-plugin</artifactId>
      <executions>
          <execution>
              <id>copy-dependencies</id>
              <phase>prepare-package</phase>
              <goals>
                  <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                  <outputDirectory>${project.build.directory}/classes/lib/</outputDirectory>
                  <overWriteReleases>false</overWriteReleases>
                  <overWriteSnapshots>false</overWriteSnapshots>
                  <overWriteIfNewer>true</overWriteIfNewer>
              </configuration>
          </execution>
      </executions>
  </plugin>

    <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <configuration>
              <archive>
                  <manifest>
                      <addClasspath>true</addClasspath>
                      <classpathPrefix>lib/</classpathPrefix>
                      <mainClass>com.refinitiv.ejv.mort2cdf.Main</mainClass>
                  </manifest>
              </archive>
          </configuration>
      </plugin>



11. Meta info - for ServiceLoader

<dependency>
     <groupId>org.kohsuke.metainf-services</groupId>
     <artifactId>metainf-services</artifactId>
     <version>1.7</version>
     <optional>true</optional>
 </dependency>

 <plugin>
        <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>3.7.0</version>
                 <configuration>
                     <source>1.8</source>
                     <target>1.8</target>
                     <encoding>utf-8</encoding>
                 </configuration>
</plugin>

<plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-surefire-plugin</artifactId>
                 <version>2.19.1</version>
                 <configuration>
                     <skipTests>true</skipTests>
                 </configuration>
</plugin>


${project.basedir}
${project.build.directory}
${project.build.sourceDirectory}
${maven.build.timestamp}


11. mirrors in China
<mirrors>
     <mirror>
         <id>alimaven</id>
         <mirrorOf>central</mirrorOf>
         <name>aliyun maven</name>
         <url>https://maven.aliyun.com/repository/central/</url>
     </mirror>
 </mirrors>


 
